[{"C:\\Users\\kagan\\Desktop\\balparmak\\src\\index.js":"1","C:\\Users\\kagan\\Desktop\\balparmak\\src\\App.js":"2","C:\\Users\\kagan\\Desktop\\balparmak\\src\\Header.js":"3","C:\\Users\\kagan\\Desktop\\balparmak\\src\\Home.js":"4","C:\\Users\\kagan\\Desktop\\balparmak\\src\\Footer.js":"5","C:\\Users\\kagan\\Desktop\\balparmak\\src\\Transition.js":"6"},{"size":224,"mtime":1608729614704,"results":"7","hashOfConfig":"8"},{"size":324,"mtime":1608818419166,"results":"9","hashOfConfig":"8"},{"size":2776,"mtime":1608808488951,"results":"10","hashOfConfig":"8"},{"size":1800,"mtime":1608816607552,"results":"11","hashOfConfig":"8"},{"size":108,"mtime":1608815831606,"results":"12","hashOfConfig":"8"},{"size":1883,"mtime":1608992502596,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"iwe6kx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\kagan\\Desktop\\balparmak\\src\\index.js",[],["28","29"],"C:\\Users\\kagan\\Desktop\\balparmak\\src\\App.js",[],"C:\\Users\\kagan\\Desktop\\balparmak\\src\\Header.js",["30","31","32","33","34"],"import React, { useState, useEffect } from 'react'\r\nimport './Header.css'\r\nimport classNames from 'classnames'\r\nimport logo from './logo.png'\r\nimport bal from './bal.jpg'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport PersonIcon from '@material-ui/icons/Person'\r\nimport ShoppingBasketIcon from '@material-ui/icons/ShoppingBasket'\r\n\r\nfunction Header() {\r\n    const [scrolled, setScrolled] = useState()\r\n    const classes = classNames('header', {\r\n        scrolled: scrolled,\r\n    })\r\n    useEffect((_) => {\r\n        const handleScroll = (_) => {\r\n            if (window.pageYOffset > 1) {\r\n                setScrolled(true)\r\n            } else {\r\n                setScrolled(false)\r\n            }\r\n        }\r\n        window.addEventListener('scroll', handleScroll)\r\n        return (_) => {\r\n            window.removeEventListener('scroll', handleScroll)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className='header_tot'>\r\n            <div className={classes}>\r\n                <div className='header_logo'>\r\n                    <img className='logo' src={logo} alt='' />\r\n                </div>\r\n                <div className='header_nav'>\r\n                    <ul class='nav_links'>\r\n                        <li>\r\n                            <a class='nav_link' href='#'>\r\n                                E-Mağaza\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a class='nav_link' href='#'>\r\n                                Kampanyalar\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a class='nav_link' href='#'>\r\n                                Hakkımızda\r\n                            </a>\r\n                        </li>{' '}\r\n                        <li>\r\n                            <a class='nav_link' href='#'>\r\n                                Blog\r\n                            </a>\r\n                        </li>{' '}\r\n                        <li>\r\n                            <a class='nav_link' href='#'>\r\n                                Bal Parmak Arıcılık Akademisi\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className='header_icons'>\r\n                    <span>\r\n                        <SearchIcon />\r\n                    </span>\r\n                    <span>\r\n                        <PersonIcon />\r\n                    </span>\r\n                    <span>\r\n                        <ShoppingBasketIcon />\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <img id='bal' src={bal} alt='' srcset='' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\kagan\\Desktop\\balparmak\\src\\Home.js",[],"C:\\Users\\kagan\\Desktop\\balparmak\\src\\Footer.js",[],"C:\\Users\\kagan\\Desktop\\balparmak\\src\\Transition.js",["35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":38,"column":29,"nodeType":"42","endLine":38,"endColumn":58},{"ruleId":"40","severity":1,"message":"41","line":43,"column":29,"nodeType":"42","endLine":43,"endColumn":58},{"ruleId":"40","severity":1,"message":"41","line":48,"column":29,"nodeType":"42","endLine":48,"endColumn":58},{"ruleId":"40","severity":1,"message":"41","line":53,"column":29,"nodeType":"42","endLine":53,"endColumn":58},{"ruleId":"40","severity":1,"message":"41","line":58,"column":29,"nodeType":"42","endLine":58,"endColumn":58},{"ruleId":"43","severity":1,"message":"44","line":45,"column":25,"nodeType":"42","endLine":45,"endColumn":72},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation"]